name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.get_tag.outputs.tag }}
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get tag name
        id: get_tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Create or verify tag
        run: |
          TAG="${{ steps.get_tag.outputs.tag }}"

          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "‚úÖ Tag $TAG already exists"
          else
            echo "üìù Creating tag $TAG"
            # Extract version for commit message
            VERSION="${TAG#v}"
            git tag -a "$TAG" -m "Release version $VERSION"
            git push origin "$TAG"
            echo "‚úÖ Tag $TAG created and pushed"
          fi

      - name: Extract version from tag
        id: version
        run: |
          TAG="${{ steps.get_tag.outputs.tag }}"
          VERSION="${TAG#v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Check if CHANGELOG exists
        id: check_changelog
        run: |
          if [ -f CHANGELOG.md ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ CHANGELOG.md found"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è CHANGELOG.md not found"
          fi

      - name: Extract release notes from CHANGELOG
        id: changelog
        if: steps.check_changelog.outputs.exists == 'true'
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          # Extract the section for this version from CHANGELOG
          if grep -q "## \[$VERSION\]" CHANGELOG.md; then
            # Use awk to extract the section between version headers
            awk "/## \[$VERSION\]/,/## \[/" CHANGELOG.md | sed '$d' > release_notes.md

            # Remove the version header line
            sed -i '1d' release_notes.md

            echo "‚úÖ Extracted release notes for version $VERSION"
            echo "has_notes=true" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è No section found for version $VERSION in CHANGELOG.md"
            echo "has_notes=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate release artifacts
        run: |
          # Create a release directory
          mkdir -p release-artifacts

          # Copy key files
          cp Brewfile release-artifacts/
          cp packages.json release-artifacts/

          # Create a tarball of the dotfiles (excluding .git and other artifacts)
          tar -czf release-artifacts/dotfiles-${{ steps.version.outputs.version }}.tar.gz \
            --exclude='.git' \
            --exclude='release-artifacts' \
            --exclude='analysis' \
            --exclude='*audit-report*' \
            --exclude='.DS_Store' \
            .

          echo "‚úÖ Release artifacts created"
          ls -lh release-artifacts/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_tag.outputs.tag }}
          name: Release ${{ steps.get_tag.outputs.tag }}
          body_path: ${{ steps.changelog.outputs.has_notes == 'true' && 'release_notes.md' || '' }}
          draft: false
          prerelease: false
          generate_release_notes: ${{ steps.changelog.outputs.has_notes != 'true' }}
          files: |
            release-artifacts/Brewfile
            release-artifacts/packages.json
            release-artifacts/dotfiles-${{ steps.version.outputs.version }}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release summary
        run: |
          echo "## üéâ Release Created Successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tag**: ${{ steps.get_tag.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Release Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Brewfile" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ packages.json" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ dotfiles-${{ steps.version.outputs.version }}.tar.gz" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Release Notes" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.changelog.outputs.has_notes }}" = "true" ]; then
            echo "- ‚úÖ Extracted from CHANGELOG.md" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚ÑπÔ∏è Auto-generated from commits" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üîó [View Release](https://github.com/${{ github.repository }}/releases/tag/${{ steps.get_tag.outputs.tag }})" >> $GITHUB_STEP_SUMMARY

  bump-version:
    name: Bump to Next Development Version
    runs-on: ubuntu-latest
    needs: release
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.repository.default_branch || 'main' }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get current version
        id: current_version
        run: |
          VERSION="${{ needs.release.outputs.version }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"

      - name: Calculate next version
        id: next_version
        run: |
          VERSION="${{ steps.current_version.outputs.version }}"

          # Parse semantic version (MAJOR.MINOR.PATCH)
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

          # Increment patch version
          NEXT_PATCH=$((PATCH + 1))
          NEXT_VERSION="${MAJOR}.${MINOR}.${NEXT_PATCH}-SNAPSHOT"

          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "Next development version: $NEXT_VERSION"

      - name: Update version files
        run: |
          NEXT_VERSION="${{ steps.next_version.outputs.next_version }}"

          # Update CHANGELOG.md - add new unreleased section
          if [ -f CHANGELOG.md ]; then
            # Create backup
            cp CHANGELOG.md CHANGELOG.md.bak

            # Add new unreleased section after the header
            sed -i '0,/^## \[/s//## [Unreleased]\n\n### Added\n\n### Changed\n\n### Fixed\n\n&/' CHANGELOG.md

            echo "‚úÖ Updated CHANGELOG.md with unreleased section"
          fi

          # Update version in README.md if it exists
          if [ -f README.md ]; then
            # Update version badge or version reference
            sed -i "s/v[0-9]*\.[0-9]*\.[0-9]*/v$NEXT_VERSION/g" README.md || true
            echo "‚úÖ Updated version references in README.md"
          fi

      - name: Create release branch and PR
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NEXT_VERSION="${{ steps.next_version.outputs.next_version }}"
          CURRENT_VERSION="${{ steps.current_version.outputs.version }}"
          BRANCH_NAME="release/post-v${CURRENT_VERSION}-bump"

          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Check if there are any changes to commit
          git add CHANGELOG.md README.md || true

          if git diff --staged --quiet; then
            echo "‚ÑπÔ∏è No version files to update"
            exit 0
          fi

          # Create and switch to new branch
          git checkout -b "$BRANCH_NAME"

          # Commit changes
          git commit -m "chore: bump version to $NEXT_VERSION

Automatically bumped version after v${CURRENT_VERSION} release.

- Updated CHANGELOG.md with new Unreleased section
- Updated version references in README.md

ü§ñ Generated with [Claude Code](https://claude.com/claude-code)

Co-Authored-By: github-actions[bot] <github-actions[bot]@users.noreply.github.com>"

          # Push branch
          git push -u origin "$BRANCH_NAME"

          # Create pull request using gh CLI
          gh pr create \
            --title "chore: bump version to $NEXT_VERSION" \
            --body "$(cat <<'PR_BODY'
## üîÑ Post-Release Version Bump

This PR automatically bumps the version to **$NEXT_VERSION** after the **v${CURRENT_VERSION}** release.

### Changes

- ‚úÖ Added **[Unreleased]** section to CHANGELOG.md
- ‚úÖ Updated version references in README.md

### Details

- **Previous Version**: ${CURRENT_VERSION}
- **Next Version**: ${NEXT_VERSION}
- **Triggered By**: Release workflow

---

ü§ñ This PR was automatically created by the release workflow.

**Auto-merge**: This PR can be safely merged to continue development on the next version.
PR_BODY
)" \
            --base "${{ github.event.repository.default_branch || 'main' }}" \
            --head "$BRANCH_NAME"

          echo "‚úÖ Version bump PR created for branch: $BRANCH_NAME"

      - name: Version bump summary
        run: |
          CURRENT_VERSION="${{ steps.current_version.outputs.version }}"
          NEXT_VERSION="${{ steps.next_version.outputs.next_version }}"
          BRANCH_NAME="release/post-v${CURRENT_VERSION}-bump"

          echo "## üîÑ Version Bump PR Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Previous Version**: ${CURRENT_VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "**Next Version**: ${NEXT_VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: \`${BRANCH_NAME}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Updated Files" >> $GITHUB_STEP_SUMMARY
          echo "- üìù CHANGELOG.md (added Unreleased section)" >> $GITHUB_STEP_SUMMARY
          echo "- üìù README.md (updated version references)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- üîç Review and merge the automatically created PR" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ The PR can be safely auto-merged to continue development" >> $GITHUB_STEP_SUMMARY
